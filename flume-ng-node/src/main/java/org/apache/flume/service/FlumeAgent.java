/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.flume.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-10")
public class FlumeAgent implements org.apache.thrift.TBase<FlumeAgent, FlumeAgent._Fields>, java.io.Serializable, Cloneable, Comparable<FlumeAgent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FlumeAgent");

  private static final org.apache.thrift.protocol.TField AGENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("agentName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SINK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sinkList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FlumeAgentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FlumeAgentTupleSchemeFactory();

  public java.lang.String agentName; // required
  public java.util.List<FlumeSource> sourceList; // required
  public java.util.List<FlumeSink> sinkList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_NAME((short)1, "agentName"),
    SOURCE_LIST((short)2, "sourceList"),
    SINK_LIST((short)3, "sinkList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_NAME
          return AGENT_NAME;
        case 2: // SOURCE_LIST
          return SOURCE_LIST;
        case 3: // SINK_LIST
          return SINK_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("agentName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_LIST, new org.apache.thrift.meta_data.FieldMetaData("sourceList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FlumeSource.class))));
    tmpMap.put(_Fields.SINK_LIST, new org.apache.thrift.meta_data.FieldMetaData("sinkList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FlumeSink.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FlumeAgent.class, metaDataMap);
  }

  public FlumeAgent() {
  }

  public FlumeAgent(
    java.lang.String agentName,
    java.util.List<FlumeSource> sourceList,
    java.util.List<FlumeSink> sinkList)
  {
    this();
    this.agentName = agentName;
    this.sourceList = sourceList;
    this.sinkList = sinkList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FlumeAgent(FlumeAgent other) {
    if (other.isSetAgentName()) {
      this.agentName = other.agentName;
    }
    if (other.isSetSourceList()) {
      java.util.List<FlumeSource> __this__sourceList = new java.util.ArrayList<FlumeSource>(other.sourceList.size());
      for (FlumeSource other_element : other.sourceList) {
        __this__sourceList.add(new FlumeSource(other_element));
      }
      this.sourceList = __this__sourceList;
    }
    if (other.isSetSinkList()) {
      java.util.List<FlumeSink> __this__sinkList = new java.util.ArrayList<FlumeSink>(other.sinkList.size());
      for (FlumeSink other_element : other.sinkList) {
        __this__sinkList.add(new FlumeSink(other_element));
      }
      this.sinkList = __this__sinkList;
    }
  }

  public FlumeAgent deepCopy() {
    return new FlumeAgent(this);
  }

  @Override
  public void clear() {
    this.agentName = null;
    this.sourceList = null;
    this.sinkList = null;
  }

  public java.lang.String getAgentName() {
    return this.agentName;
  }

  public FlumeAgent setAgentName(java.lang.String agentName) {
    this.agentName = agentName;
    return this;
  }

  public void unsetAgentName() {
    this.agentName = null;
  }

  /** Returns true if field agentName is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentName() {
    return this.agentName != null;
  }

  public void setAgentNameIsSet(boolean value) {
    if (!value) {
      this.agentName = null;
    }
  }

  public int getSourceListSize() {
    return (this.sourceList == null) ? 0 : this.sourceList.size();
  }

  public java.util.Iterator<FlumeSource> getSourceListIterator() {
    return (this.sourceList == null) ? null : this.sourceList.iterator();
  }

  public void addToSourceList(FlumeSource elem) {
    if (this.sourceList == null) {
      this.sourceList = new java.util.ArrayList<FlumeSource>();
    }
    this.sourceList.add(elem);
  }

  public java.util.List<FlumeSource> getSourceList() {
    return this.sourceList;
  }

  public FlumeAgent setSourceList(java.util.List<FlumeSource> sourceList) {
    this.sourceList = sourceList;
    return this;
  }

  public void unsetSourceList() {
    this.sourceList = null;
  }

  /** Returns true if field sourceList is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceList() {
    return this.sourceList != null;
  }

  public void setSourceListIsSet(boolean value) {
    if (!value) {
      this.sourceList = null;
    }
  }

  public int getSinkListSize() {
    return (this.sinkList == null) ? 0 : this.sinkList.size();
  }

  public java.util.Iterator<FlumeSink> getSinkListIterator() {
    return (this.sinkList == null) ? null : this.sinkList.iterator();
  }

  public void addToSinkList(FlumeSink elem) {
    if (this.sinkList == null) {
      this.sinkList = new java.util.ArrayList<FlumeSink>();
    }
    this.sinkList.add(elem);
  }

  public java.util.List<FlumeSink> getSinkList() {
    return this.sinkList;
  }

  public FlumeAgent setSinkList(java.util.List<FlumeSink> sinkList) {
    this.sinkList = sinkList;
    return this;
  }

  public void unsetSinkList() {
    this.sinkList = null;
  }

  /** Returns true if field sinkList is set (has been assigned a value) and false otherwise */
  public boolean isSetSinkList() {
    return this.sinkList != null;
  }

  public void setSinkListIsSet(boolean value) {
    if (!value) {
      this.sinkList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case AGENT_NAME:
      if (value == null) {
        unsetAgentName();
      } else {
        setAgentName((java.lang.String)value);
      }
      break;

    case SOURCE_LIST:
      if (value == null) {
        unsetSourceList();
      } else {
        setSourceList((java.util.List<FlumeSource>)value);
      }
      break;

    case SINK_LIST:
      if (value == null) {
        unsetSinkList();
      } else {
        setSinkList((java.util.List<FlumeSink>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_NAME:
      return getAgentName();

    case SOURCE_LIST:
      return getSourceList();

    case SINK_LIST:
      return getSinkList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AGENT_NAME:
      return isSetAgentName();
    case SOURCE_LIST:
      return isSetSourceList();
    case SINK_LIST:
      return isSetSinkList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FlumeAgent)
      return this.equals((FlumeAgent)that);
    return false;
  }

  public boolean equals(FlumeAgent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_agentName = true && this.isSetAgentName();
    boolean that_present_agentName = true && that.isSetAgentName();
    if (this_present_agentName || that_present_agentName) {
      if (!(this_present_agentName && that_present_agentName))
        return false;
      if (!this.agentName.equals(that.agentName))
        return false;
    }

    boolean this_present_sourceList = true && this.isSetSourceList();
    boolean that_present_sourceList = true && that.isSetSourceList();
    if (this_present_sourceList || that_present_sourceList) {
      if (!(this_present_sourceList && that_present_sourceList))
        return false;
      if (!this.sourceList.equals(that.sourceList))
        return false;
    }

    boolean this_present_sinkList = true && this.isSetSinkList();
    boolean that_present_sinkList = true && that.isSetSinkList();
    if (this_present_sinkList || that_present_sinkList) {
      if (!(this_present_sinkList && that_present_sinkList))
        return false;
      if (!this.sinkList.equals(that.sinkList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAgentName()) ? 131071 : 524287);
    if (isSetAgentName())
      hashCode = hashCode * 8191 + agentName.hashCode();

    hashCode = hashCode * 8191 + ((isSetSourceList()) ? 131071 : 524287);
    if (isSetSourceList())
      hashCode = hashCode * 8191 + sourceList.hashCode();

    hashCode = hashCode * 8191 + ((isSetSinkList()) ? 131071 : 524287);
    if (isSetSinkList())
      hashCode = hashCode * 8191 + sinkList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FlumeAgent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAgentName()).compareTo(other.isSetAgentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentName, other.agentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSourceList()).compareTo(other.isSetSourceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceList, other.sourceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSinkList()).compareTo(other.isSetSinkList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSinkList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sinkList, other.sinkList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FlumeAgent(");
    boolean first = true;

    sb.append("agentName:");
    if (this.agentName == null) {
      sb.append("null");
    } else {
      sb.append(this.agentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceList:");
    if (this.sourceList == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sinkList:");
    if (this.sinkList == null) {
      sb.append("null");
    } else {
      sb.append(this.sinkList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (agentName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'agentName' was not present! Struct: " + toString());
    }
    if (sourceList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sourceList' was not present! Struct: " + toString());
    }
    if (sinkList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sinkList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FlumeAgentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FlumeAgentStandardScheme getScheme() {
      return new FlumeAgentStandardScheme();
    }
  }

  private static class FlumeAgentStandardScheme extends org.apache.thrift.scheme.StandardScheme<FlumeAgent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FlumeAgent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentName = iprot.readString();
              struct.setAgentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.sourceList = new java.util.ArrayList<FlumeSource>(_list18.size);
                FlumeSource _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new FlumeSource();
                  _elem19.read(iprot);
                  struct.sourceList.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setSourceListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SINK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.sinkList = new java.util.ArrayList<FlumeSink>(_list21.size);
                FlumeSink _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = new FlumeSink();
                  _elem22.read(iprot);
                  struct.sinkList.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setSinkListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FlumeAgent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentName != null) {
        oprot.writeFieldBegin(AGENT_NAME_FIELD_DESC);
        oprot.writeString(struct.agentName);
        oprot.writeFieldEnd();
      }
      if (struct.sourceList != null) {
        oprot.writeFieldBegin(SOURCE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sourceList.size()));
          for (FlumeSource _iter24 : struct.sourceList)
          {
            _iter24.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sinkList != null) {
        oprot.writeFieldBegin(SINK_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sinkList.size()));
          for (FlumeSink _iter25 : struct.sinkList)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FlumeAgentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FlumeAgentTupleScheme getScheme() {
      return new FlumeAgentTupleScheme();
    }
  }

  private static class FlumeAgentTupleScheme extends org.apache.thrift.scheme.TupleScheme<FlumeAgent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FlumeAgent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.agentName);
      {
        oprot.writeI32(struct.sourceList.size());
        for (FlumeSource _iter26 : struct.sourceList)
        {
          _iter26.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.sinkList.size());
        for (FlumeSink _iter27 : struct.sinkList)
        {
          _iter27.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FlumeAgent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.agentName = iprot.readString();
      struct.setAgentNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.sourceList = new java.util.ArrayList<FlumeSource>(_list28.size);
        FlumeSource _elem29;
        for (int _i30 = 0; _i30 < _list28.size; ++_i30)
        {
          _elem29 = new FlumeSource();
          _elem29.read(iprot);
          struct.sourceList.add(_elem29);
        }
      }
      struct.setSourceListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.sinkList = new java.util.ArrayList<FlumeSink>(_list31.size);
        FlumeSink _elem32;
        for (int _i33 = 0; _i33 < _list31.size; ++_i33)
        {
          _elem32 = new FlumeSink();
          _elem32.read(iprot);
          struct.sinkList.add(_elem32);
        }
      }
      struct.setSinkListIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

