/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.flume.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-07")
public class FlumeAgent implements org.apache.thrift.TBase<FlumeAgent, FlumeAgent._Fields>, java.io.Serializable, Cloneable, Comparable<FlumeAgent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FlumeAgent");

  private static final org.apache.thrift.protocol.TField AGENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("agentName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("SinkType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HTTP_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("httpSource", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField KAFKA_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("kafkaSource", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField HDFS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfsSource", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DB_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("dbSource", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField HDFS_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfsSink", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField ES_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("esSink", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField HAS_STATE_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("hasStateService", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FlumeAgentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FlumeAgentTupleSchemeFactory();

  public java.lang.String agentName; // required
  /**
   * 
   * @see SourceType
   */
  public SourceType sourceType; // required
  /**
   * 
   * @see SinkType
   */
  public SinkType SinkType; // required
  public HttpSource httpSource; // optional
  public KafkaSource kafkaSource; // optional
  public HDFSSource hdfsSource; // optional
  public DBSource dbSource; // optional
  public HDFSSink hdfsSink; // optional
  public ESSink esSink; // optional
  public boolean hasStateService; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_NAME((short)1, "agentName"),
    /**
     * 
     * @see SourceType
     */
    SOURCE_TYPE((short)2, "sourceType"),
    /**
     * 
     * @see SinkType
     */
    SINK_TYPE((short)3, "SinkType"),
    HTTP_SOURCE((short)4, "httpSource"),
    KAFKA_SOURCE((short)5, "kafkaSource"),
    HDFS_SOURCE((short)6, "hdfsSource"),
    DB_SOURCE((short)7, "dbSource"),
    HDFS_SINK((short)8, "hdfsSink"),
    ES_SINK((short)9, "esSink"),
    HAS_STATE_SERVICE((short)10, "hasStateService");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_NAME
          return AGENT_NAME;
        case 2: // SOURCE_TYPE
          return SOURCE_TYPE;
        case 3: // SINK_TYPE
          return SINK_TYPE;
        case 4: // HTTP_SOURCE
          return HTTP_SOURCE;
        case 5: // KAFKA_SOURCE
          return KAFKA_SOURCE;
        case 6: // HDFS_SOURCE
          return HDFS_SOURCE;
        case 7: // DB_SOURCE
          return DB_SOURCE;
        case 8: // HDFS_SINK
          return HDFS_SINK;
        case 9: // ES_SINK
          return ES_SINK;
        case 10: // HAS_STATE_SERVICE
          return HAS_STATE_SERVICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASSTATESERVICE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HTTP_SOURCE,_Fields.KAFKA_SOURCE,_Fields.HDFS_SOURCE,_Fields.DB_SOURCE,_Fields.HDFS_SINK,_Fields.ES_SINK};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("agentName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sourceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SourceType.class)));
    tmpMap.put(_Fields.SINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("SinkType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SinkType.class)));
    tmpMap.put(_Fields.HTTP_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("httpSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HttpSource.class)));
    tmpMap.put(_Fields.KAFKA_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("kafkaSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KafkaSource.class)));
    tmpMap.put(_Fields.HDFS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("hdfsSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HDFSSource.class)));
    tmpMap.put(_Fields.DB_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("dbSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DBSource.class)));
    tmpMap.put(_Fields.HDFS_SINK, new org.apache.thrift.meta_data.FieldMetaData("hdfsSink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HDFSSink.class)));
    tmpMap.put(_Fields.ES_SINK, new org.apache.thrift.meta_data.FieldMetaData("esSink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ESSink.class)));
    tmpMap.put(_Fields.HAS_STATE_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("hasStateService", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FlumeAgent.class, metaDataMap);
  }

  public FlumeAgent() {
  }

  public FlumeAgent(
    java.lang.String agentName,
    SourceType sourceType,
    SinkType SinkType,
    boolean hasStateService)
  {
    this();
    this.agentName = agentName;
    this.sourceType = sourceType;
    this.SinkType = SinkType;
    this.hasStateService = hasStateService;
    setHasStateServiceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FlumeAgent(FlumeAgent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAgentName()) {
      this.agentName = other.agentName;
    }
    if (other.isSetSourceType()) {
      this.sourceType = other.sourceType;
    }
    if (other.isSetSinkType()) {
      this.SinkType = other.SinkType;
    }
    if (other.isSetHttpSource()) {
      this.httpSource = new HttpSource(other.httpSource);
    }
    if (other.isSetKafkaSource()) {
      this.kafkaSource = new KafkaSource(other.kafkaSource);
    }
    if (other.isSetHdfsSource()) {
      this.hdfsSource = new HDFSSource(other.hdfsSource);
    }
    if (other.isSetDbSource()) {
      this.dbSource = new DBSource(other.dbSource);
    }
    if (other.isSetHdfsSink()) {
      this.hdfsSink = new HDFSSink(other.hdfsSink);
    }
    if (other.isSetEsSink()) {
      this.esSink = new ESSink(other.esSink);
    }
    this.hasStateService = other.hasStateService;
  }

  public FlumeAgent deepCopy() {
    return new FlumeAgent(this);
  }

  @Override
  public void clear() {
    this.agentName = null;
    this.sourceType = null;
    this.SinkType = null;
    this.httpSource = null;
    this.kafkaSource = null;
    this.hdfsSource = null;
    this.dbSource = null;
    this.hdfsSink = null;
    this.esSink = null;
    setHasStateServiceIsSet(false);
    this.hasStateService = false;
  }

  public java.lang.String getAgentName() {
    return this.agentName;
  }

  public FlumeAgent setAgentName(java.lang.String agentName) {
    this.agentName = agentName;
    return this;
  }

  public void unsetAgentName() {
    this.agentName = null;
  }

  /** Returns true if field agentName is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentName() {
    return this.agentName != null;
  }

  public void setAgentNameIsSet(boolean value) {
    if (!value) {
      this.agentName = null;
    }
  }

  /**
   * 
   * @see SourceType
   */
  public SourceType getSourceType() {
    return this.sourceType;
  }

  /**
   * 
   * @see SourceType
   */
  public FlumeAgent setSourceType(SourceType sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  public void unsetSourceType() {
    this.sourceType = null;
  }

  /** Returns true if field sourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceType() {
    return this.sourceType != null;
  }

  public void setSourceTypeIsSet(boolean value) {
    if (!value) {
      this.sourceType = null;
    }
  }

  /**
   * 
   * @see SinkType
   */
  public SinkType getSinkType() {
    return this.SinkType;
  }

  /**
   * 
   * @see SinkType
   */
  public FlumeAgent setSinkType(SinkType SinkType) {
    this.SinkType = SinkType;
    return this;
  }

  public void unsetSinkType() {
    this.SinkType = null;
  }

  /** Returns true if field SinkType is set (has been assigned a value) and false otherwise */
  public boolean isSetSinkType() {
    return this.SinkType != null;
  }

  public void setSinkTypeIsSet(boolean value) {
    if (!value) {
      this.SinkType = null;
    }
  }

  public HttpSource getHttpSource() {
    return this.httpSource;
  }

  public FlumeAgent setHttpSource(HttpSource httpSource) {
    this.httpSource = httpSource;
    return this;
  }

  public void unsetHttpSource() {
    this.httpSource = null;
  }

  /** Returns true if field httpSource is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpSource() {
    return this.httpSource != null;
  }

  public void setHttpSourceIsSet(boolean value) {
    if (!value) {
      this.httpSource = null;
    }
  }

  public KafkaSource getKafkaSource() {
    return this.kafkaSource;
  }

  public FlumeAgent setKafkaSource(KafkaSource kafkaSource) {
    this.kafkaSource = kafkaSource;
    return this;
  }

  public void unsetKafkaSource() {
    this.kafkaSource = null;
  }

  /** Returns true if field kafkaSource is set (has been assigned a value) and false otherwise */
  public boolean isSetKafkaSource() {
    return this.kafkaSource != null;
  }

  public void setKafkaSourceIsSet(boolean value) {
    if (!value) {
      this.kafkaSource = null;
    }
  }

  public HDFSSource getHdfsSource() {
    return this.hdfsSource;
  }

  public FlumeAgent setHdfsSource(HDFSSource hdfsSource) {
    this.hdfsSource = hdfsSource;
    return this;
  }

  public void unsetHdfsSource() {
    this.hdfsSource = null;
  }

  /** Returns true if field hdfsSource is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfsSource() {
    return this.hdfsSource != null;
  }

  public void setHdfsSourceIsSet(boolean value) {
    if (!value) {
      this.hdfsSource = null;
    }
  }

  public DBSource getDbSource() {
    return this.dbSource;
  }

  public FlumeAgent setDbSource(DBSource dbSource) {
    this.dbSource = dbSource;
    return this;
  }

  public void unsetDbSource() {
    this.dbSource = null;
  }

  /** Returns true if field dbSource is set (has been assigned a value) and false otherwise */
  public boolean isSetDbSource() {
    return this.dbSource != null;
  }

  public void setDbSourceIsSet(boolean value) {
    if (!value) {
      this.dbSource = null;
    }
  }

  public HDFSSink getHdfsSink() {
    return this.hdfsSink;
  }

  public FlumeAgent setHdfsSink(HDFSSink hdfsSink) {
    this.hdfsSink = hdfsSink;
    return this;
  }

  public void unsetHdfsSink() {
    this.hdfsSink = null;
  }

  /** Returns true if field hdfsSink is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfsSink() {
    return this.hdfsSink != null;
  }

  public void setHdfsSinkIsSet(boolean value) {
    if (!value) {
      this.hdfsSink = null;
    }
  }

  public ESSink getEsSink() {
    return this.esSink;
  }

  public FlumeAgent setEsSink(ESSink esSink) {
    this.esSink = esSink;
    return this;
  }

  public void unsetEsSink() {
    this.esSink = null;
  }

  /** Returns true if field esSink is set (has been assigned a value) and false otherwise */
  public boolean isSetEsSink() {
    return this.esSink != null;
  }

  public void setEsSinkIsSet(boolean value) {
    if (!value) {
      this.esSink = null;
    }
  }

  public boolean isHasStateService() {
    return this.hasStateService;
  }

  public FlumeAgent setHasStateService(boolean hasStateService) {
    this.hasStateService = hasStateService;
    setHasStateServiceIsSet(true);
    return this;
  }

  public void unsetHasStateService() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASSTATESERVICE_ISSET_ID);
  }

  /** Returns true if field hasStateService is set (has been assigned a value) and false otherwise */
  public boolean isSetHasStateService() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASSTATESERVICE_ISSET_ID);
  }

  public void setHasStateServiceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASSTATESERVICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case AGENT_NAME:
      if (value == null) {
        unsetAgentName();
      } else {
        setAgentName((java.lang.String)value);
      }
      break;

    case SOURCE_TYPE:
      if (value == null) {
        unsetSourceType();
      } else {
        setSourceType((SourceType)value);
      }
      break;

    case SINK_TYPE:
      if (value == null) {
        unsetSinkType();
      } else {
        setSinkType((SinkType)value);
      }
      break;

    case HTTP_SOURCE:
      if (value == null) {
        unsetHttpSource();
      } else {
        setHttpSource((HttpSource)value);
      }
      break;

    case KAFKA_SOURCE:
      if (value == null) {
        unsetKafkaSource();
      } else {
        setKafkaSource((KafkaSource)value);
      }
      break;

    case HDFS_SOURCE:
      if (value == null) {
        unsetHdfsSource();
      } else {
        setHdfsSource((HDFSSource)value);
      }
      break;

    case DB_SOURCE:
      if (value == null) {
        unsetDbSource();
      } else {
        setDbSource((DBSource)value);
      }
      break;

    case HDFS_SINK:
      if (value == null) {
        unsetHdfsSink();
      } else {
        setHdfsSink((HDFSSink)value);
      }
      break;

    case ES_SINK:
      if (value == null) {
        unsetEsSink();
      } else {
        setEsSink((ESSink)value);
      }
      break;

    case HAS_STATE_SERVICE:
      if (value == null) {
        unsetHasStateService();
      } else {
        setHasStateService((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_NAME:
      return getAgentName();

    case SOURCE_TYPE:
      return getSourceType();

    case SINK_TYPE:
      return getSinkType();

    case HTTP_SOURCE:
      return getHttpSource();

    case KAFKA_SOURCE:
      return getKafkaSource();

    case HDFS_SOURCE:
      return getHdfsSource();

    case DB_SOURCE:
      return getDbSource();

    case HDFS_SINK:
      return getHdfsSink();

    case ES_SINK:
      return getEsSink();

    case HAS_STATE_SERVICE:
      return isHasStateService();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AGENT_NAME:
      return isSetAgentName();
    case SOURCE_TYPE:
      return isSetSourceType();
    case SINK_TYPE:
      return isSetSinkType();
    case HTTP_SOURCE:
      return isSetHttpSource();
    case KAFKA_SOURCE:
      return isSetKafkaSource();
    case HDFS_SOURCE:
      return isSetHdfsSource();
    case DB_SOURCE:
      return isSetDbSource();
    case HDFS_SINK:
      return isSetHdfsSink();
    case ES_SINK:
      return isSetEsSink();
    case HAS_STATE_SERVICE:
      return isSetHasStateService();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FlumeAgent)
      return this.equals((FlumeAgent)that);
    return false;
  }

  public boolean equals(FlumeAgent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_agentName = true && this.isSetAgentName();
    boolean that_present_agentName = true && that.isSetAgentName();
    if (this_present_agentName || that_present_agentName) {
      if (!(this_present_agentName && that_present_agentName))
        return false;
      if (!this.agentName.equals(that.agentName))
        return false;
    }

    boolean this_present_sourceType = true && this.isSetSourceType();
    boolean that_present_sourceType = true && that.isSetSourceType();
    if (this_present_sourceType || that_present_sourceType) {
      if (!(this_present_sourceType && that_present_sourceType))
        return false;
      if (!this.sourceType.equals(that.sourceType))
        return false;
    }

    boolean this_present_SinkType = true && this.isSetSinkType();
    boolean that_present_SinkType = true && that.isSetSinkType();
    if (this_present_SinkType || that_present_SinkType) {
      if (!(this_present_SinkType && that_present_SinkType))
        return false;
      if (!this.SinkType.equals(that.SinkType))
        return false;
    }

    boolean this_present_httpSource = true && this.isSetHttpSource();
    boolean that_present_httpSource = true && that.isSetHttpSource();
    if (this_present_httpSource || that_present_httpSource) {
      if (!(this_present_httpSource && that_present_httpSource))
        return false;
      if (!this.httpSource.equals(that.httpSource))
        return false;
    }

    boolean this_present_kafkaSource = true && this.isSetKafkaSource();
    boolean that_present_kafkaSource = true && that.isSetKafkaSource();
    if (this_present_kafkaSource || that_present_kafkaSource) {
      if (!(this_present_kafkaSource && that_present_kafkaSource))
        return false;
      if (!this.kafkaSource.equals(that.kafkaSource))
        return false;
    }

    boolean this_present_hdfsSource = true && this.isSetHdfsSource();
    boolean that_present_hdfsSource = true && that.isSetHdfsSource();
    if (this_present_hdfsSource || that_present_hdfsSource) {
      if (!(this_present_hdfsSource && that_present_hdfsSource))
        return false;
      if (!this.hdfsSource.equals(that.hdfsSource))
        return false;
    }

    boolean this_present_dbSource = true && this.isSetDbSource();
    boolean that_present_dbSource = true && that.isSetDbSource();
    if (this_present_dbSource || that_present_dbSource) {
      if (!(this_present_dbSource && that_present_dbSource))
        return false;
      if (!this.dbSource.equals(that.dbSource))
        return false;
    }

    boolean this_present_hdfsSink = true && this.isSetHdfsSink();
    boolean that_present_hdfsSink = true && that.isSetHdfsSink();
    if (this_present_hdfsSink || that_present_hdfsSink) {
      if (!(this_present_hdfsSink && that_present_hdfsSink))
        return false;
      if (!this.hdfsSink.equals(that.hdfsSink))
        return false;
    }

    boolean this_present_esSink = true && this.isSetEsSink();
    boolean that_present_esSink = true && that.isSetEsSink();
    if (this_present_esSink || that_present_esSink) {
      if (!(this_present_esSink && that_present_esSink))
        return false;
      if (!this.esSink.equals(that.esSink))
        return false;
    }

    boolean this_present_hasStateService = true;
    boolean that_present_hasStateService = true;
    if (this_present_hasStateService || that_present_hasStateService) {
      if (!(this_present_hasStateService && that_present_hasStateService))
        return false;
      if (this.hasStateService != that.hasStateService)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAgentName()) ? 131071 : 524287);
    if (isSetAgentName())
      hashCode = hashCode * 8191 + agentName.hashCode();

    hashCode = hashCode * 8191 + ((isSetSourceType()) ? 131071 : 524287);
    if (isSetSourceType())
      hashCode = hashCode * 8191 + sourceType.getValue();

    hashCode = hashCode * 8191 + ((isSetSinkType()) ? 131071 : 524287);
    if (isSetSinkType())
      hashCode = hashCode * 8191 + SinkType.getValue();

    hashCode = hashCode * 8191 + ((isSetHttpSource()) ? 131071 : 524287);
    if (isSetHttpSource())
      hashCode = hashCode * 8191 + httpSource.hashCode();

    hashCode = hashCode * 8191 + ((isSetKafkaSource()) ? 131071 : 524287);
    if (isSetKafkaSource())
      hashCode = hashCode * 8191 + kafkaSource.hashCode();

    hashCode = hashCode * 8191 + ((isSetHdfsSource()) ? 131071 : 524287);
    if (isSetHdfsSource())
      hashCode = hashCode * 8191 + hdfsSource.hashCode();

    hashCode = hashCode * 8191 + ((isSetDbSource()) ? 131071 : 524287);
    if (isSetDbSource())
      hashCode = hashCode * 8191 + dbSource.hashCode();

    hashCode = hashCode * 8191 + ((isSetHdfsSink()) ? 131071 : 524287);
    if (isSetHdfsSink())
      hashCode = hashCode * 8191 + hdfsSink.hashCode();

    hashCode = hashCode * 8191 + ((isSetEsSink()) ? 131071 : 524287);
    if (isSetEsSink())
      hashCode = hashCode * 8191 + esSink.hashCode();

    hashCode = hashCode * 8191 + ((hasStateService) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(FlumeAgent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAgentName()).compareTo(other.isSetAgentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentName, other.agentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSourceType()).compareTo(other.isSetSourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceType, other.sourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSinkType()).compareTo(other.isSetSinkType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSinkType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SinkType, other.SinkType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHttpSource()).compareTo(other.isSetHttpSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpSource, other.httpSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKafkaSource()).compareTo(other.isSetKafkaSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKafkaSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kafkaSource, other.kafkaSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHdfsSource()).compareTo(other.isSetHdfsSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfsSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfsSource, other.hdfsSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDbSource()).compareTo(other.isSetDbSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbSource, other.dbSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHdfsSink()).compareTo(other.isSetHdfsSink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfsSink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfsSink, other.hdfsSink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEsSink()).compareTo(other.isSetEsSink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEsSink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esSink, other.esSink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHasStateService()).compareTo(other.isSetHasStateService());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasStateService()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasStateService, other.hasStateService);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FlumeAgent(");
    boolean first = true;

    sb.append("agentName:");
    if (this.agentName == null) {
      sb.append("null");
    } else {
      sb.append(this.agentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceType:");
    if (this.sourceType == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SinkType:");
    if (this.SinkType == null) {
      sb.append("null");
    } else {
      sb.append(this.SinkType);
    }
    first = false;
    if (isSetHttpSource()) {
      if (!first) sb.append(", ");
      sb.append("httpSource:");
      if (this.httpSource == null) {
        sb.append("null");
      } else {
        sb.append(this.httpSource);
      }
      first = false;
    }
    if (isSetKafkaSource()) {
      if (!first) sb.append(", ");
      sb.append("kafkaSource:");
      if (this.kafkaSource == null) {
        sb.append("null");
      } else {
        sb.append(this.kafkaSource);
      }
      first = false;
    }
    if (isSetHdfsSource()) {
      if (!first) sb.append(", ");
      sb.append("hdfsSource:");
      if (this.hdfsSource == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfsSource);
      }
      first = false;
    }
    if (isSetDbSource()) {
      if (!first) sb.append(", ");
      sb.append("dbSource:");
      if (this.dbSource == null) {
        sb.append("null");
      } else {
        sb.append(this.dbSource);
      }
      first = false;
    }
    if (isSetHdfsSink()) {
      if (!first) sb.append(", ");
      sb.append("hdfsSink:");
      if (this.hdfsSink == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfsSink);
      }
      first = false;
    }
    if (isSetEsSink()) {
      if (!first) sb.append(", ");
      sb.append("esSink:");
      if (this.esSink == null) {
        sb.append("null");
      } else {
        sb.append(this.esSink);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("hasStateService:");
    sb.append(this.hasStateService);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (agentName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'agentName' was not present! Struct: " + toString());
    }
    if (sourceType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sourceType' was not present! Struct: " + toString());
    }
    if (SinkType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'SinkType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'hasStateService' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (httpSource != null) {
      httpSource.validate();
    }
    if (kafkaSource != null) {
      kafkaSource.validate();
    }
    if (hdfsSource != null) {
      hdfsSource.validate();
    }
    if (dbSource != null) {
      dbSource.validate();
    }
    if (hdfsSink != null) {
      hdfsSink.validate();
    }
    if (esSink != null) {
      esSink.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FlumeAgentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FlumeAgentStandardScheme getScheme() {
      return new FlumeAgentStandardScheme();
    }
  }

  private static class FlumeAgentStandardScheme extends org.apache.thrift.scheme.StandardScheme<FlumeAgent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FlumeAgent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agentName = iprot.readString();
              struct.setAgentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourceType = org.apache.flume.service.SourceType.findByValue(iprot.readI32());
              struct.setSourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SINK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.SinkType = org.apache.flume.service.SinkType.findByValue(iprot.readI32());
              struct.setSinkTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HTTP_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.httpSource = new HttpSource();
              struct.httpSource.read(iprot);
              struct.setHttpSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // KAFKA_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.kafkaSource = new KafkaSource();
              struct.kafkaSource.read(iprot);
              struct.setKafkaSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HDFS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hdfsSource = new HDFSSource();
              struct.hdfsSource.read(iprot);
              struct.setHdfsSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DB_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dbSource = new DBSource();
              struct.dbSource.read(iprot);
              struct.setDbSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HDFS_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hdfsSink = new HDFSSink();
              struct.hdfsSink.read(iprot);
              struct.setHdfsSinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ES_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.esSink = new ESSink();
              struct.esSink.read(iprot);
              struct.setEsSinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HAS_STATE_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasStateService = iprot.readBool();
              struct.setHasStateServiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetHasStateService()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'hasStateService' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FlumeAgent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentName != null) {
        oprot.writeFieldBegin(AGENT_NAME_FIELD_DESC);
        oprot.writeString(struct.agentName);
        oprot.writeFieldEnd();
      }
      if (struct.sourceType != null) {
        oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sourceType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.SinkType != null) {
        oprot.writeFieldBegin(SINK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.SinkType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.httpSource != null) {
        if (struct.isSetHttpSource()) {
          oprot.writeFieldBegin(HTTP_SOURCE_FIELD_DESC);
          struct.httpSource.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kafkaSource != null) {
        if (struct.isSetKafkaSource()) {
          oprot.writeFieldBegin(KAFKA_SOURCE_FIELD_DESC);
          struct.kafkaSource.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hdfsSource != null) {
        if (struct.isSetHdfsSource()) {
          oprot.writeFieldBegin(HDFS_SOURCE_FIELD_DESC);
          struct.hdfsSource.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dbSource != null) {
        if (struct.isSetDbSource()) {
          oprot.writeFieldBegin(DB_SOURCE_FIELD_DESC);
          struct.dbSource.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hdfsSink != null) {
        if (struct.isSetHdfsSink()) {
          oprot.writeFieldBegin(HDFS_SINK_FIELD_DESC);
          struct.hdfsSink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.esSink != null) {
        if (struct.isSetEsSink()) {
          oprot.writeFieldBegin(ES_SINK_FIELD_DESC);
          struct.esSink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(HAS_STATE_SERVICE_FIELD_DESC);
      oprot.writeBool(struct.hasStateService);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FlumeAgentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FlumeAgentTupleScheme getScheme() {
      return new FlumeAgentTupleScheme();
    }
  }

  private static class FlumeAgentTupleScheme extends org.apache.thrift.scheme.TupleScheme<FlumeAgent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FlumeAgent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.agentName);
      oprot.writeI32(struct.sourceType.getValue());
      oprot.writeI32(struct.SinkType.getValue());
      oprot.writeBool(struct.hasStateService);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHttpSource()) {
        optionals.set(0);
      }
      if (struct.isSetKafkaSource()) {
        optionals.set(1);
      }
      if (struct.isSetHdfsSource()) {
        optionals.set(2);
      }
      if (struct.isSetDbSource()) {
        optionals.set(3);
      }
      if (struct.isSetHdfsSink()) {
        optionals.set(4);
      }
      if (struct.isSetEsSink()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetHttpSource()) {
        struct.httpSource.write(oprot);
      }
      if (struct.isSetKafkaSource()) {
        struct.kafkaSource.write(oprot);
      }
      if (struct.isSetHdfsSource()) {
        struct.hdfsSource.write(oprot);
      }
      if (struct.isSetDbSource()) {
        struct.dbSource.write(oprot);
      }
      if (struct.isSetHdfsSink()) {
        struct.hdfsSink.write(oprot);
      }
      if (struct.isSetEsSink()) {
        struct.esSink.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FlumeAgent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.agentName = iprot.readString();
      struct.setAgentNameIsSet(true);
      struct.sourceType = org.apache.flume.service.SourceType.findByValue(iprot.readI32());
      struct.setSourceTypeIsSet(true);
      struct.SinkType = org.apache.flume.service.SinkType.findByValue(iprot.readI32());
      struct.setSinkTypeIsSet(true);
      struct.hasStateService = iprot.readBool();
      struct.setHasStateServiceIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.httpSource = new HttpSource();
        struct.httpSource.read(iprot);
        struct.setHttpSourceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.kafkaSource = new KafkaSource();
        struct.kafkaSource.read(iprot);
        struct.setKafkaSourceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hdfsSource = new HDFSSource();
        struct.hdfsSource.read(iprot);
        struct.setHdfsSourceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dbSource = new DBSource();
        struct.dbSource.read(iprot);
        struct.setDbSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hdfsSink = new HDFSSink();
        struct.hdfsSink.read(iprot);
        struct.setHdfsSinkIsSet(true);
      }
      if (incoming.get(5)) {
        struct.esSink = new ESSink();
        struct.esSink.read(iprot);
        struct.setEsSinkIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

