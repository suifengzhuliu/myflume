/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.flume.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-10")
public class KafkaSource implements org.apache.thrift.TBase<KafkaSource, KafkaSource._Fields>, java.io.Serializable, Cloneable, Comparable<KafkaSource> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KafkaSource");

  private static final org.apache.thrift.protocol.TField SERVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("servers", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOPICS_FIELD_DESC = new org.apache.thrift.protocol.TField("topics", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KafkaSourceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KafkaSourceTupleSchemeFactory();

  public java.lang.String servers; // required
  public java.lang.String topics; // required
  public java.lang.String group; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVERS((short)1, "servers"),
    TOPICS((short)2, "topics"),
    GROUP((short)3, "group");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVERS
          return SERVERS;
        case 2: // TOPICS
          return TOPICS;
        case 3: // GROUP
          return GROUP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.GROUP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVERS, new org.apache.thrift.meta_data.FieldMetaData("servers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPICS, new org.apache.thrift.meta_data.FieldMetaData("topics", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KafkaSource.class, metaDataMap);
  }

  public KafkaSource() {
  }

  public KafkaSource(
    java.lang.String servers,
    java.lang.String topics)
  {
    this();
    this.servers = servers;
    this.topics = topics;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KafkaSource(KafkaSource other) {
    if (other.isSetServers()) {
      this.servers = other.servers;
    }
    if (other.isSetTopics()) {
      this.topics = other.topics;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
  }

  public KafkaSource deepCopy() {
    return new KafkaSource(this);
  }

  @Override
  public void clear() {
    this.servers = null;
    this.topics = null;
    this.group = null;
  }

  public java.lang.String getServers() {
    return this.servers;
  }

  public KafkaSource setServers(java.lang.String servers) {
    this.servers = servers;
    return this;
  }

  public void unsetServers() {
    this.servers = null;
  }

  /** Returns true if field servers is set (has been assigned a value) and false otherwise */
  public boolean isSetServers() {
    return this.servers != null;
  }

  public void setServersIsSet(boolean value) {
    if (!value) {
      this.servers = null;
    }
  }

  public java.lang.String getTopics() {
    return this.topics;
  }

  public KafkaSource setTopics(java.lang.String topics) {
    this.topics = topics;
    return this;
  }

  public void unsetTopics() {
    this.topics = null;
  }

  /** Returns true if field topics is set (has been assigned a value) and false otherwise */
  public boolean isSetTopics() {
    return this.topics != null;
  }

  public void setTopicsIsSet(boolean value) {
    if (!value) {
      this.topics = null;
    }
  }

  public java.lang.String getGroup() {
    return this.group;
  }

  public KafkaSource setGroup(java.lang.String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SERVERS:
      if (value == null) {
        unsetServers();
      } else {
        setServers((java.lang.String)value);
      }
      break;

    case TOPICS:
      if (value == null) {
        unsetTopics();
      } else {
        setTopics((java.lang.String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVERS:
      return getServers();

    case TOPICS:
      return getTopics();

    case GROUP:
      return getGroup();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SERVERS:
      return isSetServers();
    case TOPICS:
      return isSetTopics();
    case GROUP:
      return isSetGroup();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof KafkaSource)
      return this.equals((KafkaSource)that);
    return false;
  }

  public boolean equals(KafkaSource that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_servers = true && this.isSetServers();
    boolean that_present_servers = true && that.isSetServers();
    if (this_present_servers || that_present_servers) {
      if (!(this_present_servers && that_present_servers))
        return false;
      if (!this.servers.equals(that.servers))
        return false;
    }

    boolean this_present_topics = true && this.isSetTopics();
    boolean that_present_topics = true && that.isSetTopics();
    if (this_present_topics || that_present_topics) {
      if (!(this_present_topics && that_present_topics))
        return false;
      if (!this.topics.equals(that.topics))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetServers()) ? 131071 : 524287);
    if (isSetServers())
      hashCode = hashCode * 8191 + servers.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopics()) ? 131071 : 524287);
    if (isSetTopics())
      hashCode = hashCode * 8191 + topics.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroup()) ? 131071 : 524287);
    if (isSetGroup())
      hashCode = hashCode * 8191 + group.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(KafkaSource other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetServers()).compareTo(other.isSetServers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.servers, other.servers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopics()).compareTo(other.isSetTopics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topics, other.topics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("KafkaSource(");
    boolean first = true;

    sb.append("servers:");
    if (this.servers == null) {
      sb.append("null");
    } else {
      sb.append(this.servers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topics:");
    if (this.topics == null) {
      sb.append("null");
    } else {
      sb.append(this.topics);
    }
    first = false;
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (servers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'servers' was not present! Struct: " + toString());
    }
    if (topics == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'topics' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KafkaSourceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaSourceStandardScheme getScheme() {
      return new KafkaSourceStandardScheme();
    }
  }

  private static class KafkaSourceStandardScheme extends org.apache.thrift.scheme.StandardScheme<KafkaSource> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KafkaSource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.servers = iprot.readString();
              struct.setServersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPICS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topics = iprot.readString();
              struct.setTopicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KafkaSource struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.servers != null) {
        oprot.writeFieldBegin(SERVERS_FIELD_DESC);
        oprot.writeString(struct.servers);
        oprot.writeFieldEnd();
      }
      if (struct.topics != null) {
        oprot.writeFieldBegin(TOPICS_FIELD_DESC);
        oprot.writeString(struct.topics);
        oprot.writeFieldEnd();
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KafkaSourceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KafkaSourceTupleScheme getScheme() {
      return new KafkaSourceTupleScheme();
    }
  }

  private static class KafkaSourceTupleScheme extends org.apache.thrift.scheme.TupleScheme<KafkaSource> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KafkaSource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.servers);
      oprot.writeString(struct.topics);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGroup()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KafkaSource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.servers = iprot.readString();
      struct.setServersIsSet(true);
      struct.topics = iprot.readString();
      struct.setTopicsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

